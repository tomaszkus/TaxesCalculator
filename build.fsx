// inclde Fake lib
#r @"packages/FAKE/tools/FakeLib.dll"
open Fake
open Fake.Git.Information
open Fake.FileHelper
open System
open System.IO

let branchName = Git.Information.getBranchName "."

let solutionFile = System.IO.Directory.GetFiles(".", "*.sln") |> Array.toList |> List.head
let solutionDir = FileHelper.directory solutionFile

let testDir = "./test_results/"

let testResultName = "TestResults.xml"

let analyseCode =  match hasBuildParam "analyse" with
                    | true -> "true"
                    | _ -> "false"

let runTests = match hasBuildParam "tests" with
                    | true -> true
                    | _ -> false

type BuildVersion = { Version: string; Commit: string; Assembly: string; Informational: string }

let getCurrentBuildVersion () : BuildVersion =
        let major = 1
        let minor = 0
        let timeStamp =  System.DateTime.UtcNow.ToString("HHmm") |> System.Int32.Parse

        let buildVersion = (new System.Version(major, minor, 30, timeStamp)).ToString()
        let shaVersion = Git.Information.getCurrentSHA1 "."
        { Version = buildVersion;
          Commit = shaVersion; 
          Assembly = (sprintf "%d.%d.0.0" major minor);
          Informational = (sprintf "%s [%s]" buildVersion shaVersion)}

Target "Default" (fun _ ->
    DoNothing()
)

Target "Prepare" (fun _ ->
 
    let cleanAndClear path =
        CreateDir path
        CleanDir path

    [testDir] |> List.iter cleanAndClear
)

Target "Clean" (fun _ -> 
    let setParams defaults = { defaults with
                                    NodeReuse = false
                                    Verbosity = Some(MSBuildVerbosity.Normal)
                                    Targets = ["Clean"]
                                    Properties = [
                                                 "Configuration", "Release"
                                    ]
        }
    build setParams solutionFile |> DoNothing
)

Target "RestoreNuGetPackages" (fun _ ->
    solutionFile
    |> RestoreMSSolutionPackages(fun p-> {p with
                                                ToolPath = FileSystem.findToolInSubPath "NuGet.exe"  "."  
                                                Sources = "http://nuget.org/api/v2;http://myget.org/F/nuget" :: p.Sources
                                                Retries = 3
                                             }
                                    )
)

Target "SetVersion" (fun _ ->
    let currentVersion = getCurrentBuildVersion()

    trace (sprintf "Build version: %A" currentVersion.Informational)

    let assemblyInfoTemplate = """// <auto-generated/>
using System.Reflection;

[assembly: AssemblyFileVersion("{0}")]
[assembly: AssemblyVersion("{1}")]
[assembly: AssemblyCopyright("FP")]
[assembly: AssemblyProduct("TaxesCalcultor")]
[assembly: AssemblyInformationalVersion("{2}")]
namespace System
{{
    internal static class AssemblyVersionInformation
    {{
        internal const string Version = "{1}";
    }}
}}"""

    let Generate content = File.WriteAllText ("./TaxesCalculator/Properties/AssemblyInfo.cs", content)

    Generate (String.Format(assemblyInfoTemplate, currentVersion.Version, currentVersion.Assembly, currentVersion.Informational))
)

Target "BuildSolution" (fun _ -> 

    // setup build parameters
    let setParams defaults = { defaults with
                                Verbosity = Some(MSBuildVerbosity.Normal)
                                Targets = ["Build"]
                                Properties = [
                                             "Configuration", "Release"
                                             "RunCodeAnalysis", analyseCode
                                ]
    }

    build setParams solutionFile |> DoNothing
)

Target "RunNunitTests" (fun _ ->
    
    // setup nunit run parameters
    // default timeout is 5 minutes which is not enough
    let setParams defaults = { defaults with
                                       DisableShadowCopy = true; 
                                       OutputFile = testDir + testResultName; 
                                       ErrorLevel = NUnitErrorLevel.FailOnFirstError;
                                       IncludeCategory = "";
                                       ExcludeCategory = "";
                                       TimeOut = TimeSpan.FromMinutes 10.0;
    }

    !! ("./**/bin/Release/**/*Tests.dll") |> Seq.iter (fun i -> printfn "%A" i)

    !! ("./**/bin/Release/**/*Tests.dll")
    |> NUnitParallel setParams
)

FinalTarget "ResetAssemblyInfos" (fun _ ->
    traceImportant "Reverting AssemblyInfo after build"

    Git.CommandHelper.runGitCommand "." ("checkout -- ./TaxesCalculator/Properties/AssemblyInfo.cs") |> printfn "%A"
)

"Clean"
    ==> "Prepare" 
    ==> "RestoreNuGetPackages"
    ==> "SetVersion"
    ==> "BuildSolution"
    =?> ("RunNunitTests", runTests)
    ==> "ResetAssemblyInfos"
    ==> "Default" 

ActivateBuildFailureTarget "ResetAssemblyInfos"

RunTargetOrDefault "Default"